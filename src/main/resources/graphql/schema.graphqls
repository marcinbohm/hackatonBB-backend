# java.util.Date implementation
scalar Date

# java.time.LocalDate implementation
scalar LocalDate

# java.time.LocalDateTime implementation
scalar LocalDateTime

# java.time.LocalTime implementation
scalar LocalTime

# javal.time.OffsetDateTime implementation
scalar OffsetDateTime

enum Direction {
    ASC, DESC
}

input SortOrder {
    property: String!
    direction: Direction!
}

type Query {
    company(companyId: ID): Company
}

type OperationStatus {
    targetClassName: String
    operationName: String
    success: Boolean
    recordId: Int
    msgList: [String]
}

type Mutation {
    addInstallation(installationInput: InstallationInput!): OperationStatus
    updateInstallation(installationInputId: ID!, installationInput: InstallationInput): OperationStatus
    deleteInstallation(installationId: ID!): OperationStatus
}

type User {
    userId: ID
    companyId: ID
    firstname: String
    lastname: String
    email: String
    login: String
    password: String
    active: Boolean
    blocked: Boolean
    expireAccountDate: LocalDate
    expirePasswordDate: LocalDate
    lastLoginTime: LocalDateTime

    company: Company
}

type Session {
    sessionId: ID
    userId: ID
    ticket: String
    lastActive: LocalDateTime
    refreshTicket: String

    user: User
}

type Permission {
    permissionId: ID
    categoryId: ID
    allowRead: Boolean
    allowAdd: Boolean
    allowModify: Boolean
    allowDelete: Boolean
    classId: ID

    category: Category
    permissionClass: Class
}

type Company {
    companyId: ID
    skrot: String
    kodPocztowy: String
    miejscowosc: String
    ulica: String
    nrDomu: String
    nrLokalu: String
    nrKonta: String
    regon: String
    nip: String
    telefon: String
    uwagi: String
    nazwa: String
    serviceRadiusInKm: Int
    addressLongitude: Float
    addressLatitude: Float

    companyUsersList: [User]
}

type Class {
    classId: ID
    classCode: String
    name: String
    description: String
    active: Boolean
    adminClass: Boolean

    classPermissionList: [Permission]
    classUserSet: [User]
}

type Category {
    categoryId: ID
    code: String
    description: String
    helpDescription: String
}

input CategoryInput {
    categoryId: ID
    code: String
    description: String
    helpDescription: String
}

type Installation {
    installationId: ID
    productId: ID
    productQuantity: ID
    installationType: String
    yieldGuarantee: Float
    southDeviationRoofSlopeCorrection
    installationPowerKWP: Float
    windSpeedMs: Float
    windSurfaceSizeM2: Float
}

input InstallationInput {
    installationId: ID
    installationType: String
    yieldGuarantee: Float
    southDeviationRoofSlopeCorrection: Float
    installationPowerKWP: Float
    windSpeedMs: Float
    windSurfaceSizeM2: Float
}

type Customer {
    customerId: ID
    companyId: ID
    firstname: String
    lastname: String

    company: Company
}

input CustomerInput {
    customerId: ID
    companyId: ID
    firstname: String
    lastname: String
}

type Point {
    pointId: ID
    customerId: ID
    latitude: Float
    longitude: Float
    yearlyInsolationLevelKwhM2: Float
    yearlyWindSpeedMph: Float

    customer: Customer
}

input PointInput {
    pointId: ID
    customerId: ID
    latitude: Float
    longitude: Float
    yearlyInsolationLevelKwhM2: Float
    yearlyWindSpeedMph: Float
}

type Product {
    productId: ID
    productPowerKWP: Float
    productPrice: BigInt
    //serial number...
}

input ProductInput {

}